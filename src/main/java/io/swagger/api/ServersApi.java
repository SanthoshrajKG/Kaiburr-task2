/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ServerDetails;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-03-26T08:50:52.945Z")

@Validated
@Api(value = "servers", description = "the servers API")
@RequestMapping(value = "/api")
public interface ServersApi {

    @ApiOperation(value = "Endpoint to create server.", nickname = "createServer", notes = "This API is used to create servers ", tags={ "Create servers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/servers",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createServer(@ApiParam(value = "The details of the new server to be created."  )  @Valid @RequestBody ServerDetails serverDetails);


    @ApiOperation(value = "Deletes a server", nickname = "deleteServer", notes = "", tags={ "Delete Servers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "server not found") })
    @RequestMapping(value = "/servers/{serverId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteServer(@ApiParam(value = "server id to delete",required=true) @PathVariable("serverId") String serverId);


    @ApiOperation(value = "Get  servers with a particular Id", nickname = "serversServerIdGet", notes = "Returns a single server", response = ServerDetails.class, tags={ "Get servers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ServerDetails.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "server not found") })
    @RequestMapping(value = "/servers/{serverId}",
        method = RequestMethod.GET)
    ResponseEntity<ServerDetails> serversServerIdGet(@ApiParam(value = "Id that need to be considered for filter",required=true) @PathVariable("serverId") String serverId);


    @ApiOperation(value = "Get  servers with a particular name", nickname = "serversServernameServerNameGet", notes = "Returns a single server", response = ServerDetails.class, tags={ "Get servers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ServerDetails.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "server not found") })
    @RequestMapping(value = "/servers/servername/{serverName}",
        method = RequestMethod.GET)
    ResponseEntity<ServerDetails> serversServernameServerNameGet(@ApiParam(value = "Name that need to be considered for filter",required=true) @PathVariable("serverName") String serverName);

}
